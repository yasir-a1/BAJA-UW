// Combined Acceleration reading and canBus communication for servant node
// Run on Arduino NANO
#include <wire.h>
#include <Adafruit_ADXL345_U.h>
#include <mcp2515.h>

bool CanInitialize(); // returns 1 for fault, 0 for no fault
bool AccInitialize(); // returns 1 for fault, 0 for no fault

volatile unsigned long currentTime;
volatile unsigned long previousTime;
unsigned long interval = 300;                                     // time interval for data pushing
Adafruit_ADXL345_Unified accel = Adafruit_ADXL345_Unified(12345); // Create an accelaration module object
struct can_frame canMsg;                                          // creates struct for data type for canmsg
MCP2515 mcp2515(10);                                              // pin for can modules

void setup()
{
    Serial.begin(9600);
    while (!Serial){delay(50)};
}

void loop()
{
    sensors_event_t event;
    accel.getEvent(&event);

}

bool CanInitialize()
{
    SPI.begin();

    mcp2515.reset();                           // clear all preset first
    mcp2515.setBitrate(CAN_500KBPS, MCP_8MHZ); // bitrate set
    mcp2515.setNormalMode();

    canMsg.can_id = 0x37; // MUST MATCH ID for MASTER NODE, can_id for transmission, lower id, means higher line priority
    canMsg.can_dlc = 1;   // bit size of message being sent

    pinMode(A0, INPUT); // pins for sensor used
    pinMode(2, OUTPUT);
    pinMode(3, OUTPUT);

    digitalWrite(2, HIGH);
    digitalWrite(3, HIGH); // change for pot pin

    Serial.println("mcp2515 Ready!");
    return 0;
}

bool AccInitialize()
{
    if (!accel.begin())
    {
        Serial.println("No ADXL345 sensor detected, check wiring!");
        return 1;
    }
    
    // Set the range in which the sensor reads, can be changed do some more research
    accel.setRange(ADXL345_RANGE_16_G);
    Serial.println("ADXL345 ready!");
    return 0;
}